document.querySelectorAll("app").forEach(function(e){e.innerHTML = ` <div class="wdgt backdrop" x-show="$store.app.curItem" x-transition.opacity.duration.500ms x-cloak > <div class="editor" spellcheck="false" x-show="$store.app.curItem"> <div class="wdgt-row wdgt-h-100"> <div class="wdgt-col-4 wdgt-side wdgt-h-100"> <a class="wdgt-tab" @click="$store.app.curTab='text'" :class="{ 'active': $store.app.curTab == 'text' }" ><i class="fa-solid fa-font"></i> <span class="wdgt-txt">Text</span></a> <a class="wdgt-tab" @click="$store.app.curTab='images'" :class="{ 'active': $store.app.curTab == 'images' }" ><i class="fa-solid fa-images"></i> <span class="wdgt-txt">Images</span></a> <a class="wdgt-tab" @click="$store.app.curTab='options'" :class="{ 'active': $store.app.curTab == 'options' }" ><i class="fa-solid fa-cog"></i> <span class="wdgt-txt">Options</span></a> </div> <div class="wdgt-col-8 wdgt-main wdgt-h-100"> <div class="wdgt-row"> <div class="wdgt-col"></div> <div class="wdgt-col wdgt-right" @click="$store.app.curItem=false"> <span class="wdgt-close">&times;</span> </div> </div> <template x-for="key in Object.keys($store.app.curItem)"> <div> <template x-if="getType(key) == 'text'"> <div x-show="$store.app.curTab=='text'"> <div class="label" x-text="key"></div> <input type="text" x-model="$store.app.curItem[key]" class="wdgt-form-control" > </div> </template> <template x-if="getType(key) == 'html'"> <div x-show="$store.app.curTab=='text'"> <div class="label" x-text="key"></div> <div class="wdgt-form-control rte" :id="'rte-'+key" x-on:input="$store.app.curItem[key] = $el.innerHTML" ></div> </div> </template> <template x-if="getType(key) == 'select'"> <div x-show="$store.app.curTab=='options'"> <div class="label" x-text="key"></div> <select class="wdgt-form-select" x-model="$store.app.curItem[key]" > <template x-for="opt in data.fields.filter(x=>x.key==key)[0].options" > <option :value="opt" x-text="opt" :selected="opt == $store.app.curItem[key]" ></option> </template> </select> </div> </template> <template x-if="getType(key) == 'img'"> <div x-show="$store.app.curTab=='images'"> <div class="label" x-text="key"></div> <button class="wdgt-btn-outline-secondary" @click="chooseImage(key)" > <i class="fas fa-image"></i> &nbsp;Upload Image </button> <template x-for="(img, index) in $store.app.curItem[key]" :key="index" > <div class="wdgt-box"> <div class="wdgt-box-img" :style="'background-image: url('+img.filename+');'" ></div> <input type="text" class="wdgt-form-control wdgt-mb-0" x-model="img.title" placeholder="title" > <button class="wdgt-btn-outline-secondary" @click="moveDown(img.filename)" title="Move down" > <i class="fas fa-caret-down"></i> </button> <button class="wdgt-btn-outline-secondary wdgt-btn-danger" @click="deleteImg(key, img.filename)" title="Delete" > <i class="fas fa-trash"></i> </button> </div> </template> </div> </template> </div> </template> <div x-show="$store.app.curTab=='options'"> <div class="label">Delete</div> <button class="wdgt-btn-outline-secondary wdgt-btn-danger" @click="deletePost()" > <i class="fas fa-trash"></i> &nbsp;Delete Post </button> </div> <button class="wdgt-btn-dark" id="btn_save" @click="save()"> Save </button> </div> </div> </div> </div>
`})
document.querySelectorAll("upload").forEach(function(e){e.innerHTML = ` <input type="file" id="fileInput" class="fileInput" accept="image/png, image/jpeg, image/gif" hidden >
`})
 
  cfg = {};
  cfg.img_width = 800;

  function app() {
    return {
      data: {},
      async init() {
        const response = await fetch("data/data.json");
        const data = await response.json();
        this.data = data;
        console.log(data);

        console.log("inited");

        // document.querySelector('#backdrop').style.display = 'block';

        document.body.addEventListener("click", (ev) => {
          if (ev.target.closest(".editable")) {
            let id = ev.target.closest(".editable").id;
            console.log(id);

            let cur = data.posts.filter((x) => x.id == id)[0];
            console.log(cur);

            Alpine.store("app").curItem = cur;
            Alpine.store("app").curTab = "text";

            setTimeout(() => {
              document.querySelector("#rte-body").innerHTML = cur.body;

              new inLine("#rte-body", {
                toolbar: [
                  "bold",
                  "italic",
                  "underline",
                  "unorderedList",
                  "orderedList",
                  "link",
                ],
              });
            }, 100);
          }
        });
      },
      getType(key) {
        var type = this.data.fields.filter((x) => x.key == key)[0];
        if (type) {
          type = type.type;
          return type;
        } else {
          return false;
        }
      },
      chooseImage(key) {
        Alpine.store("app").curKey = key;
        document.querySelector("#fileInput").click();
      },
      async save() {
        const rawResponse = await fetch("api/save.php", {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ type: "json", data: this.data }),
        });
        var resp = await rawResponse.json();
        console.log(resp);

        Alpine.store("app").curItem = false;
      },
      async deleteImg(key, filename) {
        if (confirm("Are you sure you wish to delete this image?")) {
          let index = Alpine.store("app").curItem[key].findIndex(
            (x) => x.filename == filename
          );
          Alpine.store("app").curItem[key].splice(index, 1);

          var rawResponse = await fetch("api/delete.php", {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ filename: filename }),
          });
          var resp = await rawResponse.json();
        }
      },
      moveDown(filename) {
        let key = Alpine.store("app").curKey;
        let index = Alpine.store("app").curItem[key].findIndex(
          (x) => x.filename == filename
        );

        let from = index;
        let to = index + 1;

        // remove `from` item and store it
        var f = Alpine.store("app").curItem[key].splice(from, 1)[0];
        // insert stored item into position `to`
        Alpine.store("app").curItem[key].splice(to, 0, f);
      },
      deletePost() {
        if (confirm("Are you sure you wish to delete this post?")) {
          let index = this.data.posts.findIndex(
            (x) => x.id == Alpine.store("app").curItem.id
          );
          this.data.posts.splice(index, 1);
          Alpine.store("app").curItem = false;
        }
      },
      makeId() {
        return Date.now();
      },
    };
  }

  document.addEventListener("alpine:init", () => {
    Alpine.store("app", {
      curTab: "text",
      curItem: false,
      curKey: false,
    });
  });


  document.getElementById("fileInput").addEventListener("change", function (e) {
    var img = new Image();

    img.onload = async function () {
      var canvas = document.createElement("canvas"),
        ctx = canvas.getContext("2d"),
        oc = document.createElement("canvas"),
        octx = oc.getContext("2d");

      canvas.width = cfg.img_width; // destination canvas size
      canvas.height = (canvas.width * img.height) / img.width;

      var cur = {
        width: Math.floor(img.width * 0.5),
        height: Math.floor(img.height * 0.5),
      };
      oc.width = cur.width;
      oc.height = cur.height;
      octx.drawImage(img, 0, 0, cur.width, cur.height);
      while (cur.width * 0.5 > cfg.img_width) {
        cur = {
          width: Math.floor(cur.width * 0.5),
          height: Math.floor(cur.height * 0.5),
        };
        octx.drawImage(
          oc,
          0,
          0,
          cur.width * 2,
          cur.height * 2,
          0,
          0,
          cur.width,
          cur.height
        );
      }
      ctx.drawImage(
        oc,
        0,
        0,
        cur.width,
        cur.height,
        0,
        0,
        canvas.width,
        canvas.height
      );
      var base64Image = canvas.toDataURL("image/jpeg");

      console.log(base64Image);

      var filename = Date.now() + ".jpg";

      var rawResponse = await fetch("api/save.php", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          type: "img",
          filename: filename,
          data: base64Image,
        }),
      });
      var resp = await rawResponse.json();
      console.log(resp);

      let key = Alpine.store("app").curKey;
      Alpine.store("app").curItem[key].push({
        title: "",
        filename: "img/" + filename,
      });
    };

    img.src = URL.createObjectURL(e.target.files[0]);
  });

